Understanding Objects and Their Internal Representation in JavaScript.

In JavaScript, objects are a fundamental part of the language, allowing developers to create complex data structures and organize code efficiently. 
Understanding how objects work and their internal representation can help developers write more efficient and optimized code. 
This blog explores the concept of objects in JavaScript, their characteristics, and their internal representation.

example of a JavaScript object:
let person = {
    name: "Robin",
    age: 24,
    isEmployed: true,
    greet: function() {
        console.log("Hello!");
    }
}; // In this example, person is an object with properties name, age, isEmployed, and a method greet.

Creating Objects:
let car = {
    make: "Toyota",
    model: "Camry",
    year: 2021
};

let book = new Object();
book.title = "JavaScript: The Good Parts";
book.author = "Douglas Crockford";

Using Constructor Functions:

function Person(name, age) {
    this.name = name;
    this.age = age;
}

let alice = new Person("Alice", 28);

Using the Object.create() Method:
let proto = {
    greet: function() {
        console.log("Hello!");
    }
};

let user = Object.create(proto);
user.name = "Bob";

let obj = { a: 1, b: 2 };


